/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectodamequipo3;

import java.beans.Statement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;

public class Menu extends javax.swing.JFrame {

    protected String creaprofesor;
    protected String creadepartamento;
    protected String creaProfresp;
    protected String creaprofesorPart;
    protected boolean creaActividad;
    protected String creatransporte;
    protected LocalDate creaFini;
    protected LocalDate creaFfin;
    protected boolean creaAloj;
    protected String creaAlojtxt;
    protected String creaadicional;
    private PerfilAccesoDAO perfilg = new PerfilAccesoDAO();
    private PerfilAcceso perfil = perfilg.porId(1);

    public Menu() {
        perfil = Sesion.getsesion();
        initComponents();
        cargarProfesores();
        cargarDepartamentos();
        cargarTransportelista();
        cargarProfecombo();
        cargarDepartacombo();
        cargarParticipanteslista();
        cargarRespolista();
        cargargrupos();
        cargarCursos();
        cargarGruposlista();
        cargarCursoslista();
        cargarSolicitado();
        cargarEstado();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        csv = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        Solicitudesscroll = new javax.swing.JScrollPane();
        Solicitudes2 = new javax.swing.JTable();
        aplicarsoli = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        profsol = new javax.swing.JLabel();
        profpar = new javax.swing.JLabel();
        profres = new javax.swing.JLabel();
        aloj = new javax.swing.JLabel();
        ffin = new javax.swing.JLabel();
        fini = new javax.swing.JLabel();
        trans = new javax.swing.JLabel();
        creact = new javax.swing.JLabel();
        dept = new javax.swing.JLabel();
        comen = new javax.swing.JLabel();
        crealoja = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        comentarios = new javax.swing.JTextArea();
        actividadprevista = new javax.swing.JCheckBox();
        btncrea = new javax.swing.JButton();
        Fechaini = new com.toedter.calendar.JCalendar();
        Fechafin = new com.toedter.calendar.JCalendar();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        horaini = new javax.swing.JTextField();
        horafn = new javax.swing.JTextField();
        solicitante = new javax.swing.JComboBox<>();
        solideparta = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        transporte = new javax.swing.JList<>();
        jScrollPane14 = new javax.swing.JScrollPane();
        listarespo = new javax.swing.JList<>();
        listaparti = new javax.swing.JScrollPane();
        listaparti1 = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        listagrupos = new javax.swing.JList<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        listacursos = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        numAlumnos = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nombresoli = new javax.swing.JTextField();
        tiposoli = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        estado = new javax.swing.JTable();
        Aplicarestado = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        Profesores = new javax.swing.JTable();
        aplicarprofe = new javax.swing.JButton();
        Borrarprofe = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane12 = new javax.swing.JScrollPane();
        Grupos = new javax.swing.JTable();
        aplicagrupos = new javax.swing.JButton();
        borrargrupo = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        cursos = new javax.swing.JTable();
        aplicacursos = new javax.swing.JButton();
        Borrarcurso = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane11 = new javax.swing.JScrollPane();
        Departamentos = new javax.swing.JTable();
        aplicardepa = new javax.swing.JButton();
        Borrardepa = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Apagar = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        jMenu2.setText("jMenu2");

        jScrollPane4.setViewportView(jTree1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1335, 787));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Selecciona un archivo para enviar:");

        csv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(csv, javax.swing.GroupLayout.PREFERRED_SIZE, 609, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(1831, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(csv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(475, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Archivos", jPanel1);

        Solicitudes2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Titulo ", "Tipo", "Departamento", "Previsto", "Transporte", "Dia inicio", "Hora inicio", "Dia final", "Hora final", "Alumnos", "Alojamiento", "Comentarios", "Estado", "Profesor Solicitante"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Solicitudes2.getTableHeader().setReorderingAllowed(false);
        Solicitudesscroll.setViewportView(Solicitudes2);
        if (Solicitudes2.getColumnModel().getColumnCount() > 0) {
            Solicitudes2.getColumnModel().getColumn(0).setResizable(false);
        }

        jScrollPane9.setViewportView(Solicitudesscroll);

        aplicarsoli.setText("Aplicar");
        aplicarsoli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarsoliActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(aplicarsoli)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 1076, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1345, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(aplicarsoli)
                .addContainerGap(353, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Modificar", jPanel6);

        profsol.setText("Profesor solicitante :");

        profpar.setText("Profesores participantes :");

        profres.setText("Profesores responsables :");

        aloj.setText("¿Alojamiento?");

        ffin.setText("Fecha fin :");

        fini.setText("Fecha inicio :");

        trans.setText("Medio de transporte :");

        creact.setText("¿Actividad prevista?");

        dept.setText("Departamento :");

        comen.setText("Comentarios adicionales :");

        crealoja.setText("Si");
        crealoja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crealojaActionPerformed(evt);
            }
        });

        comentarios.setColumns(20);
        comentarios.setRows(5);
        jScrollPane2.setViewportView(comentarios);

        actividadprevista.setText("Si");

        btncrea.setText("Enviar");
        btncrea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncreaActionPerformed(evt);
            }
        });

        jLabel2.setText("Hora inicio:");

        jLabel3.setText("Hora fin:");

        horaini.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horainiActionPerformed(evt);
            }
        });

        horafn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horafnActionPerformed(evt);
            }
        });

        solicitante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solicitanteActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(transporte);

        jScrollPane14.setViewportView(listarespo);

        listaparti.setViewportView(listaparti1);

        jScrollPane7.setViewportView(listagrupos);

        jScrollPane8.setViewportView(listacursos);

        jLabel4.setText("Grupos");

        jLabel5.setText("Cursos");

        jLabel6.setText("Numero Alumnos");

        tiposoli.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tiposoliActionPerformed(evt);
            }
        });

        jLabel7.setText("nombre actividad:");

        jLabel8.setText("Tipo");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(crealoja)
                                    .addComponent(aloj)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(64, 64, 64)
                                        .addComponent(listaparti, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(53, 53, 53)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(profres)
                                        .addGap(152, 152, 152)
                                        .addComponent(profpar)
                                        .addGap(141, 141, 141)
                                        .addComponent(comen)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btncrea))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(profsol)
                        .addComponent(trans)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(solicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(71, 71, 71))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGap(11, 11, 11)))
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGap(61, 61, 61)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(dept, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(solideparta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(actividadprevista))
                                        .addComponent(creact, javax.swing.GroupLayout.Alignment.TRAILING)))
                                .addGroup(jPanel5Layout.createSequentialGroup()
                                    .addGap(12, 12, 12)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Fechaini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(fini))
                                    .addGap(46, 46, 46)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Fechafin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ffin))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addGap(64, 64, 64))
                                            .addGroup(jPanel5Layout.createSequentialGroup()
                                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(nombresoli)
                                                    .addComponent(horaini))
                                                .addGap(29, 29, 29)))
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                            .addComponent(jLabel7)
                                            .addGap(29, 29, 29)))
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel3)
                                                .addComponent(horafn, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                                                .addComponent(tiposoli))
                                            .addGap(42, 42, 42)
                                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(numAlumnos)))
                                        .addComponent(jLabel8)))))))
                .addContainerGap(1333, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(profsol)
                            .addComponent(dept)
                            .addComponent(creact))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(actividadprevista)
                            .addComponent(solicitante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(solideparta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(0, 1, Short.MAX_VALUE)
                                .addComponent(fini)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Fechaini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(50, 50, 50)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(profres)
                                    .addComponent(profpar)
                                    .addComponent(comen)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addComponent(trans)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(aloj)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(crealoja))
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(horafn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(numAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(horaini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel7)
                                                .addComponent(jLabel8))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(nombresoli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(tiposoli, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(jPanel5Layout.createSequentialGroup()
                                            .addComponent(ffin)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(Fechafin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane2)
                                .addComponent(listaparti))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btncrea)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(442, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Crear", jPanel5);

        jButton1.setText("Recargar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        estado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Titulo", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, perfil.getTipo().equalsIgnoreCase("administrador")
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(estado);

        Aplicarestado.setText("Aplicar");
        Aplicarestado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AplicarestadoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Aplicarestado)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1001, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1089, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(267, 267, 267))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGap(445, 445, 445)
                        .addComponent(jButton1)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(Aplicarestado)
                .addContainerGap(368, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Estado", jPanel7);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );

        jTabbedPane1.addTab("Solicitudes", jPanel2);

        Profesores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "nombre", "apellidos", "dni", "correo", "departamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(Profesores);

        jScrollPane6.setViewportView(jScrollPane5);

        aplicarprofe.setText("Aplicar");
        aplicarprofe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicarprofeActionPerformed(evt);
            }
        });

        Borrarprofe.setText("Borrar");
        Borrarprofe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarprofeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(Borrarprofe)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aplicarprofe))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1356, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aplicarprofe)
                    .addComponent(Borrarprofe))
                .addContainerGap(347, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Profesores", jPanel8);

        Grupos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "idcurso", "num_alumnos", "activo", "codgrupo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane12.setViewportView(Grupos);

        aplicagrupos.setText("Aplicar");
        aplicagrupos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicagruposActionPerformed(evt);
            }
        });

        borrargrupo.setText("Borrar");
        borrargrupo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrargrupoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(borrargrupo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aplicagrupos))
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 1028, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1359, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane12, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(aplicagrupos)
                    .addComponent(borrargrupo))
                .addContainerGap(349, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Grupos", jPanel9);

        cursos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "codcurso", "descripcion", "etapa", "activo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane13.setViewportView(cursos);

        aplicacursos.setText("Aplicar");
        aplicacursos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicacursosActionPerformed(evt);
            }
        });

        Borrarcurso.setText("Borrar");
        Borrarcurso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrarcursoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(Borrarcurso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aplicacursos))
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 1028, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1359, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aplicacursos)
                    .addComponent(Borrarcurso))
                .addContainerGap(349, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Cursos", jPanel10);

        Departamentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "codigo", "nombre", "IdProfesorJefe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane11.setViewportView(Departamentos);

        aplicardepa.setText("Aplicar");
        aplicardepa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aplicardepaActionPerformed(evt);
            }
        });

        Borrardepa.setText("Borrar");
        Borrardepa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BorrardepaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(Borrardepa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(aplicardepa))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 1018, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(1363, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aplicardepa)
                    .addComponent(Borrardepa))
                .addContainerGap(353, Short.MAX_VALUE))
        );

        jTabbedPane4.addTab("Departamentos", jPanel11);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane4)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane4)
        );

        jTabbedPane1.addTab("Mantenimiento", jPanel4);

        Apagar.setText("Apagar");
        Apagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApagarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(Apagar, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(2244, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(Apagar, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(831, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Apagar", jPanel3);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 6, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarProfesores() {
        ProfesorDAO p = new ProfesorDAO();
        DefaultTableModel model = (DefaultTableModel) Profesores.getModel();
        List<Profesor> profesores = p.listar();
        for (Profesor profesor : profesores) {
            model.addRow(new Object[]{
                profesor.getId(),
                profesor.getNombre(),
                profesor.getApellidos(),
                profesor.getDni(),
                profesor.getCorreo(),
                profesor.getDepartamento().getId()
            });
        }
    }

    private void cargarDepartamentos() {
        DepartamentoDAO1 d = new DepartamentoDAO1();
        DefaultTableModel model = (DefaultTableModel) Departamentos.getModel();
        List<Departamento> departamentos = d.listar();
        String dato = null;
        for (Departamento departamento : departamentos) {
            if (departamento.getIdjefe() != null) {
                dato = String.valueOf(departamento.getIdjefe().getId());
            }
            model.addRow(new Object[]{
                departamento.getId(),
                departamento.getCod_departamento(),
                departamento.getNom_departamento(),
                dato
            });
            dato = null;
        }
    }

    private void cargarTransportelista() {
        MedioTransporteDAO m = new MedioTransporteDAO();
        List<MedioTransporte> medios = m.listar();
        DefaultListModel model = new DefaultListModel();
        transporte.setModel(model);
        model.addElement("0.-Sin transporte");
        for (MedioTransporte medio : medios) {
            model.addElement(medio.getId() + ".-" + medio.getTipo().name());
        }

    }

    private void cargarParticipanteslista() {
        ProfesorDAO m = new ProfesorDAO();
        List<Profesor> profesores = m.listar();
        DefaultListModel model = new DefaultListModel();
        listaparti1.setModel(model);
        for (Profesor pro : profesores) {
            model.addElement(pro.getId() + ".-" + pro.getNombre() + " " + pro.getApellidos());
        }

    }

    private void cargarRespolista() {
        ProfesorDAO m = new ProfesorDAO();
        List<Profesor> profesores = m.listar();
        DefaultListModel model = new DefaultListModel();
        listarespo.setModel(model);
        for (Profesor pro : profesores) {
            model.addElement(pro.getId() + ".-" + pro.getNombre() + " " + pro.getApellidos());
        }

    }

    private void cargarGruposlista() {
        GruposDAO m = new GruposDAO();
        List<Grupos> grupos = m.listar();
        DefaultListModel model = new DefaultListModel();
        listagrupos.setModel(model);
        for (Grupos grupo : grupos) {
            model.addElement(grupo.getId() + ".-" + grupo.getCodgrupo());
        }

    }

    private void cargarSolicitado() {
        SolicitudesDAO s = new SolicitudesDAO();
        List<Solicitudes> solis = s.listarporidsolicitante(perfil.getIdprofesor().getId());
        DefaultTableModel model = (DefaultTableModel) Solicitudes2.getModel();
        for (Solicitudes soli : solis) {
            String previsto = "No";
            String medio_transporte = "No";
            String alojamiento = "No";

            if (soli.isPrevisto()) {
                previsto = "Si";
            }
            if (soli.isMedio_transporte()) {
                medio_transporte = "Si";
            }
            if (soli.isAlojamiento()) {
                alojamiento = "Si";
            }
            model.addRow(new Object[]{
                soli.getId(),
                soli.getTitulo_actividad(),
                soli.getTipo_actividad(),
                soli.getDepartamento().getId(),
                previsto,
                medio_transporte,
                soli.getFechaini(),
                soli.getHoraini(),
                soli.getFechafn(),
                soli.getHorafn(),
                soli.getNumeroalumnos(),
                alojamiento,
                soli.getComentarios(),
                soli.getEstado().name(),
                soli.getProfesor_solicitante().getId()
            });
        }
    }

    private void cargarEstado() {
        SolicitudesDAO s = new SolicitudesDAO();
        List<Solicitudes> solis = s.listar();
        DefaultTableModel model = (DefaultTableModel) estado.getModel();

        for (Solicitudes soli : solis) {
            model.addRow(new Object[]{
                soli.getId(),
                soli.getTitulo_actividad(),
                soli.getEstado().name()
            });
        }
    }

    private void cargarCursoslista() {
        CursosDAO m = new CursosDAO();
        List<Curso> cursos = m.listar();
        DefaultListModel model = new DefaultListModel();
        listacursos.setModel(model);
        for (Curso curso : cursos) {
            model.addElement(curso.getId() + ".-" + curso.getCodcurso());
        }

    }

    private void cargargrupos() {
        GruposDAO d = new GruposDAO();
        DefaultTableModel model = (DefaultTableModel) Grupos.getModel();
        List<Grupos> grupos = d.listar();
        String activo;
        for (Grupos grupo : grupos) {
            activo = "No";
            if (grupo.isActivo()) {
                activo = "Si";
            }
            model.addRow(new Object[]{
                grupo.getId(),
                grupo.getCurso().getId(),
                grupo.getNum_alumnos(),
                activo,
                grupo.getCodgrupo()
            });
        }
    }

    private void cargarCursos() {
        CursosDAO d = new CursosDAO();
        DefaultTableModel model = (DefaultTableModel) cursos.getModel();
        
        List<Curso> cursos = d.listar();
        String activo;
        for (Curso curso : cursos) {
            activo = "No";
            if (curso.isActivo()) {
                activo = "Si";
            }
            model.addRow(new Object[]{
                curso.getId(),
                curso.getCodcurso(),
                curso.getDesc_curso(),
                curso.getEtapa(),
                activo
            });
        }
    }

    private void cargarProfecombo() {
        ProfesorDAO m = new ProfesorDAO();
        List<Profesor> profesores = m.listar();
        for (Profesor pro : profesores) {
            solicitante.addItem(String.valueOf(pro.getId()) + ".-" + pro.getNombre() + " " + pro.getApellidos());
        }

    }

    private void cargarDepartacombo() {
        DepartamentoDAO1 m = new DepartamentoDAO1();
        List<Departamento> departamentos = m.listar();
        for (Departamento departa : departamentos) {
            solideparta.addItem(String.valueOf(departa.getId()) + ".-" + departa.getCod_departamento());
        }

    }

    private LocalDate convertToLocalDateViaInstant(Date dateToConvert) {
        return dateToConvert.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }
    public LocalDate fromDateToLocalDate(Date date) {
    return date.toInstant()
      .atZone(ZoneId.systemDefault())
      .toLocalDate();
}

    private void ApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApagarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_ApagarActionPerformed

    private void csvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvActionPerformed
        csv.getSelectedFile();
    }//GEN-LAST:event_csvActionPerformed

    private void crealojaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crealojaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_crealojaActionPerformed

    private void btncreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncreaActionPerformed
        ProfesorDAO p = new ProfesorDAO();
        DepartamentoDAO1 d = new DepartamentoDAO1();
        GruposDAO g = new GruposDAO();
        CursosDAO c = new CursosDAO();
        MedioTransporteDAO t = new MedioTransporteDAO();
        String idprofe=(String)solicitante.getSelectedItem();
        int indexp = idprofe.indexOf(".");
        Profesor profesolicitante = p.porId(Integer.parseInt(idprofe.substring(0,indexp)));
        String ideparta=(String)solideparta.getSelectedItem();
        int indexd = ideparta.indexOf(".");
        Departamento departa = d.porId(Integer.parseInt(ideparta.substring(0,indexd)));
        boolean prevista = actividadprevista.isSelected();

        List<String> listatran = transporte.getSelectedValuesList();
        LinkedList<MedioTransporte> listainttran;
        listainttran = new LinkedList<MedioTransporte>();
        boolean transporteb=false;
        for (String s : listatran) {
            
            
            int index = s.indexOf(".");
            int idtran = Integer.parseInt(s.substring(0, index));
            if(idtran>0){
            transporteb=true;
            MedioTransporte transpo = t.porId(idtran);
            listainttran.add(transpo);  
            }
            
        }
        List<String> listaresp = listarespo.getSelectedValuesList();
        LinkedList<Profesor> listaintrespo;
        listaintrespo = new LinkedList<Profesor>();
        for (String s : listaresp) {
            int index = s.indexOf(".");
            int idrespo = Integer.parseInt(s.substring(0, index));
            Profesor pro = p.porId(idrespo);
            listaintrespo.add(pro);
        }
        List<String> listapart = listaparti1.getSelectedValuesList();
        LinkedList<Profesor> listaintpart;
        listaintpart = new LinkedList<Profesor>();
        for (String s : listapart) {
            int index = s.indexOf(".");
            int id = Integer.parseInt(s.substring(0, index));
            Profesor pro = p.porId(id);
            listaintrespo.add(pro);
        }
        List<String> listagrup = listagrupos.getSelectedValuesList();
        LinkedList<Grupos> listaintgrup;
        listaintgrup = new LinkedList<Grupos>();
        for (String s : listagrup) {
            int index = s.indexOf(".");
            int id = Integer.parseInt(s.substring(0, index));
            Grupos grup = g.porId(id);
            listaintgrup.add(grup);
        }
        List<String> listacurs = listacursos.getSelectedValuesList();
        LinkedList<Curso> listaintcurs;
        listaintcurs = new LinkedList<Curso>();
        for (String s : listacurs) {
            int index = s.indexOf(".");
            int id = Integer.parseInt(s.substring(0, index));
            Curso curs = c.porId(id);
            listaintcurs.add(curs);
        }
        LocalDate fechaini = convertToLocalDateViaInstant(Fechaini.getCalendar().getTime());
        LocalDate fechafn= convertToLocalDateViaInstant(Fechafin.getCalendar().getTime());
        LocalTime hini=LocalTime.of(Integer.parseInt(horaini.getText().substring(0, 2)),Integer.parseInt(horaini.getText().substring(3)));
        LocalTime hifn=LocalTime.of(Integer.parseInt(horafn.getText().substring(0, 2)),Integer.parseInt(horaini.getText().substring(3)));
        String alu=numAlumnos.getText();
        boolean aloja = crealoja.isSelected();
        String nombre=nombresoli.getText();
        String tipo=tiposoli.getText();
        String comentario= comentarios.getText();
        Solicitudes soli=new Solicitudes(0,nombre,tipo,alu,comentario,prevista,transporteb,aloja,fechaini,fechafn,hini,hifn,departa,profesolicitante,Solicitudes.estadosoli.solicitado);
        SolicitudesDAO s=new SolicitudesDAO();
        s.guardar(soli);
        DefaultTableModel model = (DefaultTableModel) Solicitudes2.getModel();
        
        s=new SolicitudesDAO();
        List<Solicitudes> list=s.listar();
        int idsoli=list.get(list.size()-1).getId();
        Solicitudes solid=list.get(list.size()-1);
        String previsto = "No";
            String medio_transporte = "No";
            String alojamiento = "No";

            if (solid.isPrevisto()) {
                previsto = "Si";
            }
            if (solid.isMedio_transporte()) {
                medio_transporte = "Si";
            }
            if (solid.isAlojamiento()) {
                alojamiento = "Si";
            }
        model.addRow(new Object[]{
                solid.getId(),
                solid.getTitulo_actividad(),
                solid.getTipo_actividad(),
                solid.getDepartamento().getId(),
                previsto,
                medio_transporte,
                solid.getFechaini(),
                solid.getHoraini(),
                solid.getFechafn(),
                solid.getHorafn(),
                solid.getNumeroalumnos(),
                alojamiento,
                solid.getComentarios(),
                solid.getEstado().name(),
                solid.getProfesor_solicitante().getId()
        });
        
        
    }//GEN-LAST:event_btncreaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // mostrardatos("");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void horainiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horainiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horainiActionPerformed

    private void horafnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horafnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_horafnActionPerformed

    private void BorrarprofeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarprofeActionPerformed
        int borrar;
        borrar = Profesores.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) Profesores.getModel();
        int eliminar = (int) model.getValueAt(borrar, 0);
        model.removeRow(borrar);
        ProfesorDAO p = new ProfesorDAO();
        if (borrar > 0) {
            p.eliminar(eliminar);
        }

    }//GEN-LAST:event_BorrarprofeActionPerformed

    private void borrargrupoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrargrupoActionPerformed
        // TODO add your handling code here:
        int borrar;
        borrar = Grupos.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) Grupos.getModel();
        int eliminar = (int) model.getValueAt(borrar, 0);
        model.removeRow(borrar);
        GruposDAO p = new GruposDAO();
        if (borrar > 0) {
            p.eliminar(eliminar);
        }
    }//GEN-LAST:event_borrargrupoActionPerformed

    private void BorrarcursoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrarcursoActionPerformed
        int borrar;
        borrar = cursos.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) cursos.getModel();
        int eliminar = (int) model.getValueAt(borrar, 0);
        model.removeRow(borrar);
        CursosDAO p = new CursosDAO();
        if (borrar > 0) {
            p.eliminar(eliminar);
        }
    }//GEN-LAST:event_BorrarcursoActionPerformed

    private void BorrardepaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BorrardepaActionPerformed
        int borrar;
        borrar = Departamentos.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) Departamentos.getModel();
        int eliminar = (int) model.getValueAt(borrar, 0);
        model.removeRow(borrar);
        DepartamentoDAO1 p = new DepartamentoDAO1();
        if (borrar > 0) {
            p.eliminar(eliminar);
        }
    }//GEN-LAST:event_BorrardepaActionPerformed

    private void aplicarprofeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarprofeActionPerformed
        int[] borrar = null;
        borrar = Profesores.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) Profesores.getModel();
        ProfesorDAO p = new ProfesorDAO();
        DepartamentoDAO1 d = new DepartamentoDAO1();
        if (borrar.length > 0) {

            for (int i = 0; i < borrar.length; i++) {

                int id = (int) model.getValueAt(borrar[i], 0);
                String nombre = (String) model.getValueAt(borrar[i], 1);
                String apellidos = (String) model.getValueAt(borrar[i], 2);
                String dni = (String) model.getValueAt(borrar[i], 3);
                String correo = (String) model.getValueAt(borrar[i], 4);

                Departamento departa = d.porId((int) model.getValueAt(borrar[i], 5));
                Profesor pro = new Profesor(id, nombre, apellidos, dni, correo, departa);
                p.modificar(pro);

            }
        }
    }//GEN-LAST:event_aplicarprofeActionPerformed

    private void aplicarsoliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicarsoliActionPerformed
        int[] borrar = null;
        borrar = Solicitudes2.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) Solicitudes2.getModel();
        SolicitudesDAO p = new SolicitudesDAO();
        DepartamentoDAO1 d = new DepartamentoDAO1();
        ProfesorDAO pro = new ProfesorDAO();
        if (borrar.length > 0) {

            for (int i = 0; i < borrar.length; i++) {
                int id = (int) model.getValueAt(borrar[i], 0);
                
                String titulo = (String) model.getValueAt(borrar[i], 1);
                
                String tipo = (String) model.getValueAt(borrar[i], 2);
                
                Departamento depa = d.porId((int) model.getValueAt(borrar[i], 3));
                
                String previsto = (String) model.getValueAt(borrar[i], 4);
                
                String transportes = (String) model.getValueAt(borrar[i], 5);
                
                LocalDate fechaini = (LocalDate) model.getValueAt(borrar[i], 6);
                LocalTime horainicio = (LocalTime) model.getValueAt(borrar[i], 7);
                LocalDate fechafn = (LocalDate) model.getValueAt(borrar[i], 8);
                LocalTime horafinal = (LocalTime) model.getValueAt(borrar[i], 9);
                String numalu = (String) model.getValueAt(borrar[i], 10);
                String alojamiento = (String) model.getValueAt(borrar[i], 11);
                String comentarios = (String) model.getValueAt(borrar[i], 12);
                String estados = (String) model.getValueAt(borrar[i], 13);
                Profesor profe = pro.porId((int) model.getValueAt(borrar[i], 14));
                boolean aloja = false;
                boolean previs = false;
                boolean transpo = false;
                if (alojamiento.toLowerCase().equals("si")) {
                    aloja = true;
                }
                if (previsto.toLowerCase().equals("si")) {
                    previs = true;
                }
                if (transportes.toLowerCase().equals("si")) {
                    transpo = true;
                }
                Solicitudes.estadosoli est = Solicitudes.estadosoli.valueOf(estados.toLowerCase());
                Solicitudes soli = new Solicitudes(id, titulo, tipo, numalu, comentarios, previs, transpo, aloja, fechaini, fechafn, horainicio, horafinal, depa, profe, est);

                p.modificar(soli);
            }
        }
    }//GEN-LAST:event_aplicarsoliActionPerformed

    private void solicitanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solicitanteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_solicitanteActionPerformed

    private void tiposoliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tiposoliActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tiposoliActionPerformed

    private void AplicarestadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AplicarestadoActionPerformed
        int[] borrar = null;
        borrar = estado.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) estado.getModel();
        SolicitudesDAO s=new SolicitudesDAO();
        for (int i = 0; i < borrar.length; i++) {
            int id = (int) model.getValueAt(borrar[i], 0);
            String titulo = (String) model.getValueAt(borrar[i], 1);
            String estados = (String) model.getValueAt(borrar[i], 2);
            Solicitudes soli = new Solicitudes(id,titulo,Solicitudes.estadosoli.valueOf(estados));
            s.modificarestado(soli);
            
        }
    }//GEN-LAST:event_AplicarestadoActionPerformed

    private void aplicagruposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicagruposActionPerformed
        int[] borrar = null;
        borrar = Grupos.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) Grupos.getModel();
        GruposDAO g =new GruposDAO();
        CursosDAO c=new CursosDAO();
        for (int i = 0; i < borrar.length; i++) {
            int id = (int) model.getValueAt(borrar[i], 0);
            Curso curs=c.porId((int)model.getValueAt(borrar[i], 1));
            int numalu=Integer.parseInt((String)model.getValueAt(borrar[i], 2));
            String activo=(String)model.getValueAt(borrar[i], 3);
            boolean act=false;
            if (activo.equalsIgnoreCase("si")) {
                act=true;
            }
            String codgrupo=(String)model.getValueAt(borrar[i], 4);
            Grupos grup=new Grupos(id,curs,numalu,act,codgrupo);
            g.modificar(grup);
            
        }
    }//GEN-LAST:event_aplicagruposActionPerformed

    private void aplicardepaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicardepaActionPerformed
        int[] borrar = null;
        borrar = Departamentos.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) Departamentos.getModel();
        DepartamentoDAO1 d =new DepartamentoDAO1();
        ProfesorDAO p=new ProfesorDAO();
        for (int i = 0; i < borrar.length; i++) {
            int id = (int) model.getValueAt(borrar[i], 0);
            String codigo = (String) model.getValueAt(borrar[i], 1);
            String nombre = (String) model.getValueAt(borrar[i], 2);
            Departamento depart;
            if(model.getValueAt(borrar[i], 3)==null){
            depart=new Departamento(id,codigo,nombre);
            } else {
            Profesor jefe = p.porId(Integer.parseInt((String) model.getValueAt(borrar[i], 3)));
            depart=new Departamento(id,codigo,nombre,jefe);
            }
            
            d.modificar(depart);
            
        }        
    }//GEN-LAST:event_aplicardepaActionPerformed

    private void aplicacursosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aplicacursosActionPerformed
        int[] borrar = null;
        borrar = cursos.getSelectedRows();
        DefaultTableModel model = (DefaultTableModel) cursos.getModel();
        CursosDAO c=new CursosDAO();
        for (int i = 0; i < borrar.length; i++) {
            int id = (int) model.getValueAt(borrar[i], 0);
            String codigo = (String) model.getValueAt(borrar[i], 1);
            String descr = (String) model.getValueAt(borrar[i], 2);
            String etapa = (String) model.getValueAt(borrar[i], 3);
            String activo = (String) model.getValueAt(borrar[i], 4);
            boolean act=false;
            if (activo.equalsIgnoreCase("si")) {
                act=true;
            }
            Curso curso=new Curso(codigo,descr,etapa,act,id);
            c.modificar(curso);
            
        } 
    }//GEN-LAST:event_aplicacursosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Apagar;
    private javax.swing.JButton Aplicarestado;
    private javax.swing.JButton Borrarcurso;
    private javax.swing.JButton Borrardepa;
    private javax.swing.JButton Borrarprofe;
    private javax.swing.JTable Departamentos;
    private com.toedter.calendar.JCalendar Fechafin;
    private com.toedter.calendar.JCalendar Fechaini;
    private javax.swing.JTable Grupos;
    private javax.swing.JTable Profesores;
    private javax.swing.JTable Solicitudes2;
    private javax.swing.JScrollPane Solicitudesscroll;
    private javax.swing.JCheckBox actividadprevista;
    private javax.swing.JLabel aloj;
    private javax.swing.JButton aplicacursos;
    private javax.swing.JButton aplicagrupos;
    private javax.swing.JButton aplicardepa;
    private javax.swing.JButton aplicarprofe;
    private javax.swing.JButton aplicarsoli;
    private javax.swing.JButton borrargrupo;
    private javax.swing.JButton btncrea;
    private javax.swing.JLabel comen;
    private javax.swing.JTextArea comentarios;
    private javax.swing.JLabel creact;
    private javax.swing.JCheckBox crealoja;
    private javax.swing.JFileChooser csv;
    private javax.swing.JTable cursos;
    private javax.swing.JLabel dept;
    private javax.swing.JTable estado;
    private javax.swing.JLabel ffin;
    private javax.swing.JLabel fini;
    private javax.swing.JTextField horafn;
    private javax.swing.JTextField horaini;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTree jTree1;
    private javax.swing.JList<String> listacursos;
    private javax.swing.JList<String> listagrupos;
    private javax.swing.JScrollPane listaparti;
    private javax.swing.JList<String> listaparti1;
    private javax.swing.JList<String> listarespo;
    private javax.swing.JTextField nombresoli;
    private javax.swing.JTextField numAlumnos;
    private javax.swing.JLabel profpar;
    private javax.swing.JLabel profres;
    private javax.swing.JLabel profsol;
    private javax.swing.JComboBox<String> solicitante;
    private javax.swing.JComboBox<String> solideparta;
    private javax.swing.JTextField tiposoli;
    private javax.swing.JLabel trans;
    private javax.swing.JList<String> transporte;
    // End of variables declaration//GEN-END:variables

    /*private void mostrardatos(String string) {
        conectar cc=new conectar();
        Connection cn=cc.conexion();
        DefaultTableModel modelo=new DefaultTableModel();
       
        modelo.addColumn("Nombre");
         modelo.addColumn("Estado");
          
        tbestado.setModel(modelo);
        String sql="";
        if (valor.equals(""))
        {
            sql="SELECT titulo_actividad,estado FROM solicitudes";
        }
          
        
        String []datos=new String [2];
        try{
            Statement st=cn.createStatement();
            ResultSet rs=st.executeQuery(sql);
            while(rs.next()){
            datos[0]=rs.getString(1);
            datos[1]=rs.getString(2);
            
            modelo.addRow(datos);
            }
            tbestado.setModel(modelo);
        }catch(SQLException ex){
            Logger.getLogger(datos.class.getName()).log(Level.SEVERE,null,ex);
        }
    }*/
}
